package ${package}.controller;

import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.xhuicloud.common.core.utils.Response;
import com.xhuicloud.common.log.annotation.SysLog;
import ${package}.entity.${ClassName};
import ${package}.service.${ClassName}Service;
import org.springframework.security.access.prepost.PreAuthorize;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.AllArgsConstructor;
import org.springframework.web.bind.annotation.*;


/**
 * @program: ${projectName}
 * @description: ${tableComment}
 * @author: ${author}
 * @create: ${datetime}
 */
@RestController
@AllArgsConstructor
@RequestMapping("/${pathName}" )
@Api(value = "${pathName}", tags = "${tableComment}管理")
public class ${ClassName}Controller {

    private final ${ClassName}Service ${className}Service;

    /**
     * 分页查询
     *
     * @param page 分页对象
     * @param ${className} ${tableComment}
     * @return
     */
    @ApiOperation(value = "分页查询", notes = "分页查询")
    @GetMapping("/page" )
    public Response page(Page page, ${ClassName} ${className}) {
        return Response.success(${className}Service.page(page, Wrappers.query(${className})));
    }


    /**
     * 通过id查询${tableComment}
     * @param id
     * @return R
     */
    @ApiOperation(value = "通过id查询${tableComment}", notes = "通过id查询${tableComment}")
    @GetMapping("/{id}")
    public Response getById(@PathVariable Integer id) {
        return Response.success(${className}Service.getById(id));
    }

    /**
     * 新增${tableComment}
     *
     * @param ${className} ${tableComment}
     * @return R
     */
    @ApiOperation(value = "新增${tableComment}", notes = "新增${tableComment}")
    @SysLog("新增${tableComment}" )
    @PostMapping
    @PreAuthorize("@authorize.hasPermission('sys_add_${pathName}')" )
    public Response save(@RequestBody ${ClassName} ${className}) {
        return Response.success(${className}Service.save(${className}));
    }

    /**
     * 修改${tableComment}
     *
     * @param ${className} ${tableComment}
     * @return R
     */
    @ApiOperation(value = "修改${tableComment}", notes = "修改${tableComment}")
    @SysLog("编辑${tableComment}" )
    @PutMapping
    @PreAuthorize("@authorize.hasPermission('sys_editor_${pathName}')" )
    public Response update(@RequestBody ${ClassName} ${className}) {
        return Response.success(${className}Service.updateById(${className}));
    }

    /**
     * 通过id删除${tableComment}
     *
     * @param id
     * @return R
     */
    @ApiOperation(value = "通过id删除${tableComment}", notes = "通过id删除${tableComment}")
    @SysLog("通过id删除${tableComment}" )
    @DeleteMapping("/{id}" )
    @PreAuthorize("@authorize.hasPermission('sys_delete_${pathName}')" )
    public Response delete(@PathVariable Integer id) {
        return Response.success(${className}Service.removeById(id));
    }

}
